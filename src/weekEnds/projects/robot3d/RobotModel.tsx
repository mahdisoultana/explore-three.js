/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 phantoms.glb --transform
Files: phantoms.glb [237.98KB] > phantoms-transformed.glb [181.27KB] (24%)
*/

import { useGLTF, useScroll } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import gsap from 'gsap';
import { useControls } from 'leva';
import { useLayoutEffect, useRef } from 'react';

export function RobotModel(props: any) {
  const robot = useRef<any>(null);

  const { nodes, materials } = useGLTF('/phantoms/phantoms-transformed.glb');
  const scroll = useScroll();
  const tl = useRef<any>();

  useFrame((state, delta) => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline({
      defaults: { duration: 2, ease: 'power1.inOut' },
    });
    const rPosition = robot.current.position;
    const rRotation = robot.current.rotation;
    tl.current
      .to(rRotation, { y: 1 }, 3)
      .to(rPosition, { x: -3 }, 3)
      //
      .to(rRotation, { y: -1 }, 6)
      .to(rPosition, { x: -3 }, 6)
      //
      .to(rRotation, { y: 0 }, 8)
      .to(rPosition, { x: 0 }, 8)
      //
      .to(rRotation, { y: -1 }, 12)
      .to(rPosition, { x: 3 }, 12)
      //
      .to(rRotation, { y: 0 }, 15)
      .to(rPosition, { x: 0 }, 15)
      //
      .to(rRotation, { y: -1, x: -1 }, 18)
      .to(rPosition, { y: 0 }, 18)
      //
      .to(rRotation, { y: -7, x: 0 }, 21)
      .to(rPosition, { y: 0 }, 21);
  }, []);
  const {
    color,
    roughness,
    metalness,
    reflectivity,
    clearcoat,
    iridescence,
    iridescenceIOR,
    emissive,
  } = useControls(
    'Robot',
    {
      color: '#aaa',
      emissive: '#000000',
      roughness: { value: 0, min: 0, max: 1 },
      metalness: { value: 1, min: 0, max: 1 },
      reflectivity: { value: 0.9, min: 0, max: 1 },
      clearcoat: { value: 0.9, min: 0, max: 1 },
      iridescence: { value: 0.9, min: 0, max: 1 },
      iridescenceIOR: { value: 0.9, min: 0, max: 1 },
    },
    { collapsed: true },
  );
  return (
    <group {...props} dispose={null} ref={robot} rotation-y="-.4">
      <mesh material={nodes.Cylindre005.material} scale={0} />
      <mesh
        geometry={nodes.Cube001.geometry}
        material={materials.Metal}
        scale={0.15}
      >
        <meshPhysicalMaterial
          color={color}
          emissive={emissive}
          roughness={roughness}
          metalness={metalness}
          reflectivity={reflectivity}
          clearcoat={clearcoat}
          iridescence={iridescence}
          iridescenceIOR={iridescenceIOR}
          iridescenceThicknessRange={[100, 1000]}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload('/phantoms/phantoms-transformed.glb');
